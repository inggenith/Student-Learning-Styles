import tkinter as tk
from tkinter import simpledialog, messagebox, ttk
import openai

class LearningStylesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Learning Styles Questionnaire with AI Chat")
        self.root.geometry("600x500")  # Set the main window size
        self.root.configure(bg="#E3F2FD")  # Light blue background

        style = ttk.Style()
        style.theme_use("clam")  # Modern look
        style.configure("TButton", font=("Arial", 12, "bold"), padding=10, background="#1E88E5", foreground="white")
        style.map("TButton", background=[("active", "#1565C0")], foreground=[("active", "white")])
        style.configure("TLabel", font=("Arial", 12), background="#E3F2FD", foreground="#0D47A1")
        style.configure("TFrame", background="#E3F2FD")
        style.configure("TCombobox", font=("Arial", 12), padding=5)

        api_frame = ttk.Frame(self.root, padding="10")
        api_frame.pack(fill='x', pady=(10, 0))
        api_label = ttk.Label(api_frame, text="Select API for Chat:")
        api_label.pack(side='left', padx=10)
        self.api_option = tk.StringVar(value="OpenAI")
        self.api_dropdown = ttk.Combobox(api_frame, textvariable=self.api_option, values=[
            "OpenAI", "Hugging Face", "GPT-J", "Cohere", "TextSynth", "LLaMA 3", "OLMo"
        ])
        self.api_dropdown.pack(side='left', padx=10)

        self.questions = {
            "Active/Reflective": [
                "I clearly understand a subject through problem-solving.",
                "I like presentations in small groups.",
                ("When I start to solve a problem, I am more likely to first analyze the problem and then work on the solution.", True),
                "I prefer using simulators to acquire new knowledge.",
                ("When you have difficulty understanding a new subject, using analogies makes it easier to acquire this knowledge.", True)
            ],
            "Sequential/Global": [
                "I like to apply the theoretical concept acquired in the development of classes through an integrative project.",
                "I like solving tasks left by the teacher for home.",
                ("When I solve problems applied to general engineering, I generally work on solutions step by step.", True),
                "When I approach a case study, I prefer to jump between different parts as it seems more relevant at the moment.",
                ("When I analyze information, I focus on the details and lose sight of the overall picture.", True)
            ],
            "Sensing/Intuitive": [
                "To appropriate theoretical knowledge, I require the use of simulations or business practices.",
                ("It's easier for me to acquire new knowledge using mind maps or conceptual maps.", True),
                "I like solving any kind of problems to develop an innovative character.",
                ("Collecting and analyzing data helps me acquire new knowledge.", True),
                "I like to acquire new knowledge and associate it practically using virtual reality."
            ],
            "Visual/Verbal": [
                "To remember the knowledge acquired from the previous day, it is more likely that I do it based on images.",
                ("To acquire new knowledge, it is necessary to do it through expository classes accompanied by texts.", True),
                "I like it when the teacher uses diagrams on the board to explain a theoretical concept.",
                ("When someone gives me directions to look for something, I prefer that they indicate it to me through a written instruction.", True),
                "When the teacher guides the data processing, I prefer that it be done through the use of graphics."
            ]
        }

        self.local_scores_list = []
        for category, qs in self.questions.items():
            local_scores = self.create_window_for_category(category, qs)
            self.local_scores_list.append(local_scores)

        submit_btn = ttk.Button(self.root, text="Submit Answers", command=self.submit_answers)
        submit_btn.pack(pady=20)

        chat_button = ttk.Button(self.root, text="Ask AI", command=self.ask_gpt)
        chat_button.pack(pady=10)

        openai.api_key = 'enter API code'

    def create_window_for_category(self, category, questions):
        window = tk.Toplevel(self.root)
        window.title(f"Category: {category}")
        window.configure(bg="#E3F2FD")  # Light blue background
        
        reminder_label = ttk.Label(window, text="5 - Always, 4 - Almost Always, 3 - Sometimes, 2 - Rarely, 1 - Never")
        reminder_label.pack(pady=(10, 5))
        
        local_scores = []
        questions_frame = ttk.Frame(window)
        questions_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        for item in questions:
            text, reverse = item if isinstance(item, tuple) else (item, False)
            frame = ttk.Frame(questions_frame)
            frame.pack(padx=20, pady=5, fill='x', expand=True)
            question_label = ttk.Label(frame, text=text, wraplength=600)
            question_label.pack(side='left', fill='x', expand=True)
            
            var = tk.IntVar(value=-1)
            local_scores.append(var)
            radio_frame = ttk.Frame(frame)
            radio_frame.pack(side='left')
            if reverse:
                range_values = range(1, 6)
            else:
                range_values = range(5, 0, -1)
            for score in range_values:
                radio_btn = ttk.Radiobutton(radio_frame, text=str(score), variable=var, value=score)
                radio_btn.pack(side='left')
        
        return local_scores

    def submit_answers(self):
        averages_text = "Average scores:\n"
        categories = list(self.questions.keys())
        average_scores = []
        for i, scores in enumerate(self.local_scores_list):
            category = categories[i]
            category_scores = [score.get() for score in scores]
            average = sum(category_scores) / len(category_scores)
            averages_text += f"{category}: {average:.1f}\n"
            average_scores.append(average)

        messagebox.showinfo("Average Scores", averages_text)

    def ask_gpt(self):
        question = simpledialog.askstring("Question", "What do you want to ask?")
        if question:
            api_choice = self.api_option.get()
            try:
                if api_choice == "OpenAI":
                    response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=[{"role": "system", "content": "You are helpful."}, {"role": "user", "content": question}]
                    )
                    response_text = response.choices[0].message['content']
                elif api_choice == "Hugging Face":
                    response_text = self.ask_hugging_face(question)
                elif api_choice == "GPT-J":
                    response_text = self.ask_gpt_j(question)
                elif api_choice == "Cohere":
                    response_text = self.ask_cohere(question)
                elif api_choice == "TextSynth":
                    response_text = self.ask_textsynth(question)
                elif api_choice == "LLaMA 3":
                    response_text = self.ask_llama3(question)
                elif api_choice == "OLMo":
                    response_text = self.ask_olmo(question)
                else:
                    response_text = "API not supported."
                
                response_window = tk.Toplevel(self.root)
                response_window.title("AI Response")
                response_window.geometry("800x100")
                ttk.Label(response_window, text=response_text, wraplength=780).pack(pady=10, padx=10)
            except Exception as e:
                messagebox.showerror("Error", f"Failed to fetch response: {str(e)}")

    # Placeholder functions for other APIs
    def ask_hugging_face(self, question):
        return f"Simulated response from Hugging Face for: {question}"

    def ask_gpt_j(self, question):
        return f"Simulated response from GPT-J for: {question}"

    def ask_cohere(self, question):
        return f"Simulated response from Cohere for: {question}"

    def ask_textsynth(self, question):
        return f"Simulated response from TextSynth for: {question}"

    def ask_llama3(self, question):
        return f"Simulated response from LLaMA 3 for: {question}"

    def ask_olmo(self, question):
        return f"Simulated response from OLMo for: {question}"

if __name__ == '__main__':
    root = tk.Tk()
    app = LearningStylesApp(root)
    root.mainloop()
